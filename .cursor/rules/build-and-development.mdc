---
description: 
globs: 
alwaysApply: false
---
# 构建和开发指南

## 构建系统
项目使用 CMake 构建系统，主要配置文件是 [CMakeLists.txt](mdc:CMakeLists.txt)。

## 系统要求
- **CMake**: 3.10 或更高版本
- **编译器**: 支持 C++11 标准的编译器
- **平台**: Windows、Linux、AIX、Solaris、HP-UX
- **测试框架**: Google Test (位于 `/usr/local/googletest`)

## 项目配置

### 核心设置
```cmake
project(MYPLAT VERSION 1.0.0 LANGUAGES CXX C)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
```

### 包含目录
```cmake
set(COMMON_INCLUDE_DIRS 
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/3rdpart/include
)
```

### 构建目标
项目包含以下主要构建目标：
- **baseutils**: 基础工具库
- **communicate**: 通信协议库  
- **tool**: 工具模块
- **pipeline**: 流水线处理框架
- **appbuilder**: 应用构建器
- **front**: 前端组件
- **src_service**: 服务示例

## 快速构建

### 使用构建脚本
```bash
# 使用快速构建脚本
./easybuild.sh
```

### 手动构建
```bash
# 创建构建目录
mkdir build && cd build

# 配置项目
cmake ..

# 编译项目
make
```

### Windows 构建
```powershell
# 创建构建目录
mkdir build
cd build

# 配置项目
cmake ..

# 编译项目
cmake --build .
```

## 第三方依赖

### 核心依赖
- **tinyxml2**: XML 解析库 - [include/tinyxml2.h](mdc:include/tinyxml2.h)
- **lz4**: 高速压缩库 - [include/lz4.h](mdc:include/lz4.h)
- **libcli**: CLI 接口库 - [include/libcli.h](mdc:include/libcli.h)

### 第三方库目录
- **位置**: [3rdpart/](mdc:3rdpart)
- **包含目录**: `${CMAKE_SOURCE_DIR}/3rdpart/include`

## 测试系统

### 测试配置
```cmake
file(GLOB SRCS tests/*.cpp)
set(GTEST_ROOT "/usr/local/googletest")
include_directories(${GTEST_ROOT}/include)
link_directories(${GTEST_ROOT}/lib)
```

### 运行测试
```bash
# 在构建目录中运行测试
cd build
ctest
```

## 开发环境设置

### IDE 配置
推荐的 IDE 设置：
- **包含路径**: `include/`, `3rdpart/include/`
- **编译标准**: C++11
- **预处理器定义**: 根据平台设置相应宏

### 调试配置
- 启用调试符号: `-g`
- 禁用优化: `-O0` 
- 启用所有警告: `-Wall`

## 服务示例

### SDTP 服务示例
- **服务器**: [src_service/sdtp_server.cpp](mdc:src_service/sdtp_server.cpp)
- **客户端**: [src_service/sdtp_client.cpp](mdc:src_service/sdtp_client.cpp)

### 运行示例
```bash
# 编译服务示例
cd build
make

# 运行 SDTP 服务器
./sdtp_server

# 运行 SDTP 客户端
./sdtp_client
```

## 开发工作流

### 1. 代码组织
- **头文件**: 放在 `include/` 目录
- **源文件**: 按模块放在 `src/` 对应子目录
- **测试文件**: 放在 `tests/` 目录
- **示例代码**: 放在 `src_service/` 目录

### 2. 模块开发
- 每个模块都有独立的 CMakeLists.txt
- 模块间通过头文件接口交互
- 共用功能放在 baseutils 中

### 3. 构建验证
```bash
# 清理构建
rm -rf build/*

# 重新构建
mkdir -p build && cd build
cmake ..
make

# 运行测试
ctest
```

### 4. 部署准备
- 确保所有依赖库已正确链接
- 验证跨平台兼容性
- 生成发布版本 (Release 模式)

## 常见问题解决

### 编译错误
1. 检查 CMake 版本是否满足要求
2. 确认编译器支持 C++11
3. 验证第三方库路径是否正确

### 链接错误
1. 检查库文件是否存在
2. 确认库的架构匹配 (32/64位)
3. 验证库的依赖关系

### 运行时错误
1. 检查动态库路径设置
2. 确认配置文件路径正确
3. 验证权限和网络设置

