---
description: 
globs: 
alwaysApply: false
---
# Pipeline 框架开发指南

## 框架概述
Pipeline 是项目的核心数据处理框架，[详细文档](mdc:src/pipeline_README.md)。

## 三层架构模型

### Workshop (工作车间) 🏭
- **位置**: [src/pipeline/workshop.cpp](mdc:src/pipeline/workshop.cpp)
- **职责**: 顶层容器和资源管理器
- **功能**: 管理线程池、内存池、监控系统

```cpp
class MyWorkshop : public Workshop {
public:
    virtual int Initialize() override;
    virtual int Stop() override;
};
```

### Stage (处理阶段) 🔄
- **位置**: [src/pipeline/stage.cpp](mdc:src/pipeline/stage.cpp)
- **职责**: 数据流转和线程管理
- **功能**: 队列管理、数据分发、阶段协调

```cpp
class MyStage : public Stage {
public:
    virtual int Initialize() override;
    virtual int Process(void* data) override;
};
```

### Handler (处理器) ⚙️
- **位置**: [src/pipeline/base_handler.cpp](mdc:src/pipeline/base_handler.cpp)
- **职责**: 具体业务逻辑处理
- **功能**: 支持树状组装、插件化架构

```cpp
class MyHandler : public BaseHandler {
public:
    virtual int Process(void* data) override;
    virtual int Initialize() override;
};
```

## 核心组件

### 线程管理
- **线程管理器**: [src/pipeline/thread_manager.cpp](mdc:src/pipeline/thread_manager.cpp)
- **线程池**: [src/pipeline/thread_pool.cpp](mdc:src/pipeline/thread_pool.cpp)
- **工作线程**: [src/pipeline/thread_worker.cpp](mdc:src/pipeline/thread_worker.cpp)
- **定时器**: [src/pipeline/timer.cpp](mdc:src/pipeline/timer.cpp)

### 队列系统
- **主队列**: [src/pipeline/queue.cpp](mdc:src/pipeline/queue.cpp)
- **简单队列**: [src/pipeline/simple_queue.cpp](mdc:src/pipeline/simple_queue.cpp)
- **分发队列**: [src/pipeline/distribute_queue.cpp](mdc:src/pipeline/distribute_queue.cpp)
- **分发规则**: [src/pipeline/distribute_rule.cpp](mdc:src/pipeline/distribute_rule.cpp)

### 内存管理
- **对象池**: [src/pipeline/object_pool.cpp](mdc:src/pipeline/object_pool.cpp)
- **支持**: 多层次对象池、自动回收、强制老化

### 监控系统
- **监控实现**: [src/pipeline/probe.cpp](mdc:src/pipeline/probe.cpp)
- **功能**: 性能统计、实时监控、报警机制

## 开发模式

### 1. 简单流水线
```cpp
// Workshop -> Stage -> Handler
Workshop* workshop = new MyWorkshop();
Stage* stage = new MyStage("data_processor");
Handler* handler = new MyHandler();

stage->AddHandler(handler);
workshop->AddStage(stage);
workshop->Start();
```

### 2. 多阶段流水线
```cpp
// Workshop -> Stage1 -> Stage2 -> Stage3
Stage* input_stage = new InputStage("input");
Stage* process_stage = new ProcessStage("process");  
Stage* output_stage = new OutputStage("output");

input_stage->SetNextStage(process_stage);
process_stage->SetNextStage(output_stage);
```

### 3. 树状分发
```cpp
// 一个 Stage 可以分发到多个子 Stage
Stage* dispatcher = new DispatchStage("dispatcher");
Stage* worker1 = new WorkerStage("worker1");
Stage* worker2 = new WorkerStage("worker2");

dispatcher->AddChildStage(worker1);
dispatcher->AddChildStage(worker2);
```

## 性能优化要点
1. **队列类型选择**: 根据场景选择合适的队列类型
2. **批处理配置**: 设置合适的批处理大小
3. **线程数调优**: 根据 CPU 核数和负载调整
4. **内存池大小**: 预估数据量配置对象池
5. **监控指标**: 关注队列长度、处理延迟、吞吐量

## 调试和监控
- 使用 Probe 系统获取实时性能数据
- 检查队列积压情况
- 监控线程利用率

- 分析内存使用模式